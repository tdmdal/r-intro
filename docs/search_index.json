[["index.html", "Intro to R Welcome to Intro to R for Business Whats R About this site R Workshop", " Intro to R Welcome to Intro to R for Business Whats R R is a powerful computer language for statistical computing. R is free, open source and available on every major platform. R has a huge set of packages for statistical modelling, machine learning, visualization as well as for communicating the results of your analysis in the form of beautiful interactive apps. RStudio, the Integrated Development Environment (IDE), provides a tailored space for data science needs such as effective data handling and storage, interactive data analysis, implementing statistical and machine learning techniques and graphical facilities. R also has a diverse and welcoming community such as the R meetups and #rstats twitter community. For more information on R, visit the official R-project website. About this site Intro to R for Business is a companion site for your Intro to R workshops, a prerequisite for select courses within Rotman programs. This site provides information on the workshops, items covered during the workshops, additional resources such as practice questions, links to other R books and tutorial to aid for further learning. As with any language the initial learning curve can be steep. So we advise that you use R often and regularly to maintain momentum and build your R skill. R Workshop Event details Intro to Data Analysis (in R) ROTMAN MBA Session 1 Date: Thursday, September 13, 2021 Time: 4:00 PM - 6:00 PM (EST) Location: Online Session 2 Date: Thursday, September 20, 2021 Time: 4:00 PM - 6:00 PM (EST) Location: Online ROTMAN Commerce Session 1 Date: Thursday, September 16, 2021 Time: 6:00 PM - 8:00 PM (EST) Location: Online Session 2 Date: Thursday, September 23, 2021 Time: 6:00 PM - 8:00 PM (EST) Location: Online Contact: Organizer: Valeria Sladojevic-Sola; Val.Sladojevic.Sola@rotman.utoronto.ca Workshop Lead: Gerhard Trippen; Gerhard.Trippen@rotman.utoronto.ca Syllabus This R workshop will introduce students to the basics of the R coding language. It allows students plenty of hands-on programming using R. The practical component includes projects that teach students to load data, assemble and disassemble data objects, navigate Rs environment system, write their own functions, and use all of Rs programming tools, such as if else statements and for loops. Furthermore, the workshop will teach not just how to program with R, but how to use the programming skills to support your work as a data scientist. Topics included are: The very basics of R Packages and help pages R objects R notation Modifying values and programs Functions Plotting Data frames Programs "],["r-basics.html", "1 R Basics 1.1 Operators 1.2 Objects 1.3 Data Types 1.4 Data Structures", " 1 R Basics 1.1 Operators Let us start with the basic. Almost all programming languages can be used as a calculator. You can use the +, -, * and / symbols to perform addition, subtraction, multiplication and division between two numeric values. These are called arithmetic operators. Type the following lines of code on the RStudio console pane and check the results of these operations: 2 + 2 10 - 5 4.5*3 4/2 The [1] in front of the results indicates that the value after it is the first value of the result for that operation. Some other arithmetic operators are ^ or ** for exponentiation, %% modulus and %/% for integer division. Logical operators perform comparison between two values. Logical operations return either TRUE or FALSE. Type and run the following lines of code and check the results: 5 &lt; 4 # less than 2 &gt; 1 # greater than 2==1 # exactly equal to 5&gt;=5 # greater than and equal to 5!=6 # not equal to A very useful binary operator in R is denoted by the colon :. Binary operators are operators that perform actions with two values. The colon operator generates regular sequences. It can also create sequence in reverse order. Whether the sequence is increasing or decreasing depends on whether the value before the operator is less than or greater than the value after the operator. 1:15 15:1 There are many other operators in R and we learn about them as we go through the remaining topics. 1.2 Objects 1.2.1 Creating Objects The power of programming lies in its ability to not only manipulate numeric values but also textual values. Any value can be stored as an object in a computer program and then referenced later for further manipulation. The assignment operator, &lt;-, is used to assign a value to an object. It comprises the less than symbol &lt; and a hyphen -. Manipulation to the value can be done by manipulating the object. a &lt;- 5 a+5 a*2.5 a&gt;=5 Object provide a way of storing data with a descriptive name such that the programs can be easily read and understood by its readers. For example, we can create an object aapl, which is the ticker for the company Apple Inc.Â and assign it a value of 274.5b, which is Apples revenue in billions for the year 2020. Now, every time you type aapl on the console, it will print 274.5b, unless you reassign a different value to this object. aapl &lt;- &quot;274.5b&quot; aapl Note: = can also be used as an assignment operator but is not recommended for R. In some cases it is forbidden. 1.2.2 Naming Objects Naming an object is a not that easy. You want the name to be meaningful and easily understood but not very lengthy. Objects with multiple words can be created by joining them with an underscore or a dot. You can also capitalize the different words. Object names cannot start with a number or a dot. Avoid using alphanumeric character in object names. Most importantly do not use a name that has already been assigned to some other value, unless you have good reason to do so. For example, variable pi exists in R by default. So does keyword variables like TRUE, FALSE, NA, etc. Do not use these names while creating an object. Doing so will override their default value and you will have to restart the R session to revert them back. pi TRUE FALSE NA R is case sensitive meaning TRUE and True are not the same. Try it yourself and see what you get! So far, you have created two objects, a and aapl. In the top right hand pane of RStudio, you will see these two objects listed on the Environment tab. If you click on the down arrow by the List icon and select Grid view, you will see additional details about these objects such as type, length, size and value. Exercise Create an object company and assign it a value of AAPL. Create another object revenue and assign it a value of 274.5. # your code here 1.3 Data Types Lets look at the type in detail because it is very important to know how R deals with different types of data. Type of an object, also known as its data type, tells us the kind of operations that is possible with that object. For example, a has numeric data type and therefore arithmetic operations can be performed to it. aapl is of character type and thus arithmetic operators cannot be applied to it. If you do, you will receive an error: aapl+1 aapl*3 aapl/3 The error message tells you that you are applying a binary operator to a non-numeric value. Four types of basic data types we will focus on are - numeric, integer, logical, and character. 1.3.1 Numeric Numeric data are contains decimal numbers. Although, it may also include values without decimal numbers. In most cases, numeric data is chosen by default in R for numeric values. Exercise Check whether the data type of the variable revenue, which you created in section 1.2, is numeric. # your code here 1.3.2 Integer Integer are whole numbers, meaning numbers without decimal. R provides numerous functions to check the data type of an object and to modify it as well. is.numeric(a) is.integer(a) Notice the results of the two operations. Even though a does not have any decimal point, R has stored it as numeric instead of integer type. While R is able to automatically distinguish data types in most cases, often you will have to explicitly tell R which data type you want for a given object. a &lt;- as.integer(a) is.integer(a) Exercise Convert the data type of variable revenue, which you created in Section 1.2, into integer. What is a possible danger of such data conversion? # your code here 1.3.3 Logical Logical data take either TRUE or FALSE values. Logical data type result from logical operations: logical_expression &lt;- (a &gt; 5) is.logical(logical_expression) NA is also considered to be of logical data type and signifies missing or null values. It is a special type of logical. is.logical(NA) Exercise Create a logical expression and check the data type. # your code here 1.3.4 Character Finally, character data types represent string. String in computer program refers to any letter, digit, punctuation and extra characters enclosed inside quotation marks. aapl, is stored as character because while creating this object we enclosed its values in quotation marks. is.character(aapl) Data type modifications must be done with careful consideration to avoid unexpected results. For example, note the data loss occurred as a result of the following data type conversions below: as.integer(5.9) as.numeric(aapl) Exercise Check if the data type of variable company, which you created in Section 1.2 is a character. # your code here 1.4 Data Structures Now that you have been introduced to objects and data types, lets look at some of the main data structures provided by R to store real world data. 1.4.1 Vectors Vectors are the simplest data structure in R. Vectors are 1-dimensional data structures. So far the objects we have created are scalar vectors, scalar because they contain a single value. Vectors with more than one value can be created as follows: is.vector(a) revenue &lt;- c(386.1, 286.2, 274.5, 182.5, 143, 119.5, 86, 82.6, 31.5, 21.9) tickers &lt;- c(&#39;AMZN&#39;, &#39;BRK.B&#39;, &#39;AAPL&#39;, &#39;GOOG&#39;, &#39;MSFT&#39;, &#39;JPM&#39;, &#39;FB&#39;, &#39;JNJ&#39;, &#39;TSLA&#39;, &#39;V&#39;) print(revenue) print(tickers) is.vector(revenue) is.vector(tickers) The function length can be used to get the number of items in a vector. length(revenue) length(tickers) Vectors can contain any data type but it must all be of the same type. In other words, a vector cannot have mixtures of data types. If you tried to create a vector with multiple data types, R will coerce the data type to the most flexible data type. There is one exception, which is with the NA data type. NA can be included within vectors of any other data type to denote missing data in that vector. mixed_vector &lt;- c(386.1, &#39;286.2&#39;, 274.5, NA, 143, 119.5, NA, 82.6, &#39;31.5&#39;, &#39;21.9&#39;) typeof(mixed_vector) If you want to extract only one item from the vector, you can do so by typing the name of the vector and then indicating the position of that item in the vector inside square brackets. For example, to extract the first item in the vector revenue and tickers, you can write the following code: revenue[1] tickers[1] If you want to extract more than one item from the vector, you can indicate the positions within a vector and place it inside square brackets. Alternatively, if the positions follow a range of numbers, then you can simply create that sequence inside the square bracket. Here are two examples: revenue[c(2,6,10)] tickers[1:5] Operators can be directly applied to the vectors to perform operations on each element of the vector, as long as the operation is possible. x &lt;- c(1,2,3) y &lt;- c(4,5,6) print(x+1) print(y+2) print(x*y) print(y/x) Exercise Create a vector of numeric type that contains range of numbers from 1 to 30. Add a value of 1 to each item in this vector and store it in a new vector. Finally, determine the length of this new vector. # your code here Create a vector of numeric type that contains 30 values of the number 3. Multiply the vector you created in Ex. #1 with this vector. # your code here Run the following operation in r and inspect the result. c(1,3) - c(2,4,6,8) In your R console type ?c. This will bring up the documentation for the function c(). Read the documentation to understand the function in detail. # your code here 1.4.2 Matrices and Arrays A matrix is a vector that has additional attributes called dimensions. Matrices have only two dimensions. Arrays are multidimensional matrices. Again, all elements in a matrix or array must be of same data type. Matrix and array can be created by using the matrix() and array() functions. Below is an example: amatrix &lt;- matrix(1:6, nrow = 3, byrow=TRUE) print(amatrix) The above line of code creates a matrix containing numbers from 1 to 6, as indicated by 1:6. It has three rows, as indicated by nrow = 3 and the values 1 through 6 are filled row-wise, as indicated by byrow = TRUE. You may define the number of columns as well using ncol=2. However, if you dont R will try to figure it out based on the number of values you passed. When using the array function, the number of dimensions can be defined using dim. The example below creates a 3 dimensional array. It has two rows, three columns and four of those 2x3 matrices. my_array &lt;- array(1:12, dim = c(2, 3, 4)) print(my_array) It can be useful to give names to rows and columns when working with a matrix. rownames(amatrix) = c(&#39;row1&#39;, &#39;row2&#39;, &#39;row3&#39;) colnames(amatrix) = c(&#39;col1&#39;, &#39;col2&#39;) print(amatrix) Matrix operations can be performed by using the arithmetic operators on matrices. amatrix + 10 # add scalar to each element amatrix * 2 # multiply each element by scalar amatrix + amatrix # matrix addition amatrix * amatrix # element by element products Matrix multiplication can be performed using %*% operator as long as the operation is mathematically possible: bmatrix &lt;- matrix(1:4, nrow=2) amatrix%*%bmatrix Extracting elements from a matrix or array is similar to extracting elements from a vector. Additionally, since matrix and array have 2 or more dimension, each dimension is separated by a ,. print(bmatrix[1]) print(bmatrix[4]) print(bmatrix[,2]) print(bmatrix[2,2]) print(amatrix[2:3,1:2]) Exercise Create a matrix from vector c(1:4) and store it as a. Create another matrix from vector c(5:20) and store is as b. # your code here Is it possible to perform matrix multiplication between a and b? If so, write the code below. # your code here Create a 3-dimensional array from vector c(1:12). # your code here 1.4.3 Lists Lists are useful because they can store multiple data types inside of it. In fact we can even store matrices, arrays or list itself if we need to. Lists are ideal for storing non-rectangular data. List() function can be used to create list. my_list &lt;- list(aapl, amatrix, my_array) print(my_list) Each element of a list can be named during its constructions: my_list &lt;- list(char = aapl, mat = amatrix, arr = my_array) print(my_list) Now we can use the $ operator to access individual item in the list using its name: my_list$mat Exercise Create a list containing all data types and data structures we have learned so far. # your code here 1.4.4 Data frames Data frame are the most commonly used data structure to store data. It is a powerful two-dimensional object comprising rows and columns. The difference between data frame and matrix is that data frame can store mixture of data types. It is similar to an excel file. An easy way to understand is that data frames are basically a bunch of vectors of the same length each with their own data types concatenated together. Below lets create a data frame from three vectors: revenue &lt;- c(386.1, 286.2, 274.5, 182.5, 143, 119.5, 86, 82.6, 31.5, 21.9) tickers &lt;- c(&#39;AMZN&#39;, &#39;BRK.B&#39;, &#39;AAPL&#39;, &#39;GOOG&#39;, &#39;MSFT&#39;, &#39;JPM&#39;, &#39;FB&#39;, &#39;JNJ&#39;, &#39;TSLA&#39;, &#39;V&#39;) company &lt;- c(&#39;Amazon&#39;, &#39;Berkshire&#39;, &#39;Apple&#39;, &#39;Google&#39;, &#39;Microsoft&#39;, &#39;JP Morgan&#39;, &#39;Facebook&#39;, &#39;Johnson &amp; Johnson&#39;, &#39;Tesla&#39;, &#39;Visa&#39;) df &lt;- data.frame(revenue_inbillions=revenue, stock_ticker=tickers, company_name=company) print(df) Notice that each column has a name and so do the rows. The name of the rows is simply the integer number that the row starts with. Various functions are available to explore the properties of data frame: dim(df) str(df) The dim function tells us that the given data frame is a 2-d data frame with 10 rows and 3 columns. The str function is an extremely useful function that provides a compact summary of the structure of the data frame object. It provides not only the dimension of the data frame but also the type of object each column is comprised of. It also prints out the first five elements of each column. Note: The str function can in fact be used with any R object. Try it out yourself and review the results. Extracting elements from a data frame is similar to that of matrix. df[,1] df[1,] df[5:10 , 1:2] Data frames are called tidy data because each column have the same number of elements. Missing data in data frames are recorded as NA. You will be working with data frames a lot as real world data are mostly in tabular format and therefore, can be easily stored as a data frame in R. "],["programming-structure.html", "2 Programming structure 2.1 Three basic control flows 2.2 Functions", " 2 Programming structure 2.1 Three basic control flows 2.1.1 Sequence Code runs line by line in sequence. For example, lets write some code to calculate the following sum of squares. \\[y = \\sum_{t=1}^{3} t^2.\\] # sum of squares t &lt;- 1:3 y &lt;- sum(t^2) print(y) In the above example, first the variable t is created. Then the sum of squares is calculated and stored in the variable y and finally, the value of y is printed. This is the sequence in which this code is written and therefore, the sequence in which it ran. 2.1.2 Conditional execution A Logical (Boolean) Expression returns either TRUE or FALSE. It is mostly used to compare quantities. Here are some examples: 1 &lt; 2 5 &gt; 4 10 == 100 Logical expressions can also be used to write conditional programs. Conditional programs perform a set of different operation(s) based on whether the accompanied logical expression is TRUE or FALSE. Conditional programs use the keywords if and/or else. Conditional programs follow the following structure: if (logical expression) { # code executed when logical expression is TRUE } else { # code executed when logical expression is FALSE } Lets consider that if a variable y is greater than 10, then we want to print out result greater than 10. Otherwise we want to print out result less than or equal to 10. The example below is the conditional program to achieve that: t = 1:3 y = sum(t^2) if (y &gt; 10) { print(&quot;result greater than 10&quot;) } else { print(&quot;result less than or equal to 10&quot;) } Since the value of y is 14, which is greater than 10, the logical expression after the keyword if is TRUE. Therefore, the operation following this logical expression that is wrapped inside the curly brackets {} runs and \"result greater than 10\" is printed on our console. In the following line is the keyword else followed by a different operation wrapped inside curly bracket again. However, these two lines of code never run even though they are written. This is the power of conditional programs, which allows us to control which operations to run. Note that in many programming languages, the indentation in a conditional program determines which lines of code to run when the given condition is met. However, in R it is determined by the curly brackets {}, not indentations but they are used still to improve code readability. Multiple if statements can be added to the conditional program: t = 1:3 y = sum(t^2) if (y &gt; 10) { print(&quot;result greater than 10&quot;) } else if (y == 10) { print(&quot;result equal to 10&quot;) } else { print(&quot;result less than 10&quot;) } There is also a ifelse function that can sometimes be handy to write short conditional programs. ifelse function takes as parameter, a logical ex a = 16 ifelse(a*2 == 16, &#39;The condition is True&#39;, &#39;The condition is False&#39;) Exercise Create a conditional statement. # your code here Create another conditional statement with multiple conditions. # your code here Run ?ifelse on your console and read the details of this function. Can you use this function to test each element of a sequence? 2.1.3 Iteration When you want to run the same set of operations in each of the elements of a sequence, you can write an iteration to do so in fewer lines of code. Iterations are also known as loops. There are two types of iterations. 2.1.3.1 For loop For loops use the keyword for and repeats a set of operations on each element of a sequence as specified. For loops follow the following structure: # for loop for (var in seq) { do something } Lets solve the sum of squares of elements in a vector using a for loop. t &lt;- 1:3 y &lt;- 0 for (ele in t) { print(ele) y &lt;- y + ele^2 } print(y) As seen in the results, the variable ele refers to each item of the vector t. The operations to be performed on each element of the vector is defined inside the curly brackets {}. First the element itself is printed and then, the variable y is updated by adding to itself the square of the value the variable ele refers to. The operations is repeated until there are no more elements left in the sequence. Note that variable ele exists inside the loop only. Outside of the loop, its value is set to the last value it iterated over. Exercise 1. Write a for loop that iterates over a range of 1 through 8 and prints the cube of each number. Write a for loop that prints the GPA given the final total score. Table: Example Final Total Score GPA Grade 90-100 4.0 A+ 85-89 4.0 A 80-84 3.7 A- 77-79 3.3 B+ 73-76 3.0 B 70-72 2.7 B- 67-69 2.3 C+ 63-66 2.0 C 60-62 1.7 C- 57-59 1.3 D+ 53-56 1.0 D 50-52 0.7 D- less than 49 0.0 F # your code here 2.1.3.2 While loop While loops use the keyword while and repeats a set of operations until a desired state is achieved. While loops follow the following structure: # while loop while (condition) { do something if condition is TRUE } Now lets perform the same operation as above using a while loop instead: t &lt;- 1:3 y &lt;- 0 counter = 1 while (counter &lt;= length(t)) { print(counter) y &lt;- y + t[counter]^2 print(y) counter &lt;- counter + 1 } Here, we also have the variable counter, which acts like the ele variable in the for loop. Except for this variable counter is used as a index to go through each element of the sequence t. After the required operation is performed on the element, the variable counter is updated by 1 so that next time it can refer to the next element in the sequence. This process is repeated until the condition counter &lt;= length(t) is met. Once the condition is met, the code terminates. Exercise Write a while loop that divides the variable n below by the integer 3 and updated the value of n until n is greater than or equal to 1. When this while loop terminates what is the value of n? Print it. # your code here 2.2 Functions A function is a unit of code block that (usually) takes in some inputs (arguments) and returns a result. We have already used many R functions, for example, print() and length(). The two main reasons to write functions are reusability and abstraction. If you find yourself repeating the same code logic or if you want to divide a large piece of code into small logical units, you should consider writing functions. In fact, everything that happens [in R] is a function call. (John Chambers, the creator of the S programming language and a core member of the R project. R is modelled after S.) For example, even the plus operation + is a function. Try typing `+`(1, 2) in the R console and see what you get. Lets write a slightly general version of sum of squares using a function. \\[y = \\sum_{t=1}^{n} t^2.\\] This function takes in 1 argument n, and return the sum as y defined above. ss &lt;- function(n) { t &lt;- 1:n # the last expression is automatically returned # or otherwise, you could write return(sum(t^2)) sum(t^2) } print(ss(2)) ## [1] 5 print(ss(3)) ## [1] 14 When the parameter n take the argument 2, the result of applying function ss is 5. When the parameter n take the argument 3, the result of applying function ss is 14. Exercise Write a function called abs_val that returns the absolute value of x i.e.Â if x is positive it should return x or if x is negative it should return -x. # your code here Write an R function to calculate \\[y = \\sum_{t=1}^{n} f(t),\\] where \\(n\\) is an integer and \\(f()\\) is a generic function that you can define later (e.g.Â \\(f(t) = t ^ 2\\) or \\(f(t) = t ^ 3\\)). The R function takes in two arguments, n and f as in the above formula, and returns the sum \\(y\\). f_sum &lt;- function(f, n) { # insert your code below return(y) } # if your code works as intended, the following should run f1 &lt;- function(t) { t^2 } print(f_sum(f1, 3L)) "],["programming-projects.html", "3 Programming projects", " 3 Programming projects Under construction "],["starting.html", "A Install R and RStudio A.1 Windows A.2 Mac A.3 Linux", " A Install R and RStudio To begin using R you will need to install R as well as RStudio, which is an integrated development environment (IDE) for R. Both are available for Windows, Mac or Linux. To download R, go to the Comprehensive R Archive Network (CRAN). Note: Administrative privileges will be needed to install new software on your computer. A.1 Windows Once on the CRAN page, click the Download R for Windows link and then click either the base link or the install R for the first time link. Next, click the first link at the top of the page, which should be the latest version of R for Windows. As of this writing, R4.1.1 is the latest version of R for Windows. An installer program will be downloaded. Click and run the installation wizard from your Downloads folder. Upon completion, R will be installed into your Program Files folders and a shortcut to R will also be placed in your Start menu. A.2 Mac Once on the CRAN page, click the Download R for Mac link. The top of the page will have information on the latest version of R for Mac. There will also be download instructions if you are using terminal. Otherwise, right below there will be a package link (with a .pkg extension) to the latest version of R for each macOS version. As of this writing, the latest R for Mac version package is R-4.1.0.pkg. You will see multiple links with same version. Click the one which corresponds to your macOS version. An installer program will be downloaded. Click and run the installation wizard from your Downloads folder. Choose the default options, which are suitable for most users. A.3 Linux R comes preinstalled on many Linux system. To upgrade to the newest version of R, go to the CRAN page and click the Download R for Linux link. Choose and click the linux system you have and follow the directory trail to the version of Linux you wish to install on. "],["install-rstudio.html", "B Install RStudio", " B Install RStudio R is a computer language. To run programs written in R you will need a tool that your computer can use to interpret R. This can be a UNIX terminal. However, RStudio is more popular due to its easy-to-use interface. You can also use other IDE of your choice, given it is R compatible. There are two versions of RStudio, Desktop and Server, available to download for free. Choose the Desktop version by clicking on Download RStudio Desktop link on the Rstudio products page. Follow the instructions to complete the installation. Once completed, you can use RStudio as most other programs in your computer by simply opening RStudio. When you open RStudio, you will see three panes. The largest pane is the console window, which is exactly the same as what you would see if you opened R application. This is where you will write your R codes and run them. The remaining two panes serve as text editor, graphics window, debugger, file manager, package manager and much more. You will learn about these functions as we require them. ADD MORE ON HOW TO USE RSTUDIO Note: When a new release of the R and/or RStudio is available for your computer, you can follow the same installation process to upgrade to the new version of the software. "],["r-packages.html", "C R packages C.1 Installing R packages C.2 Loading R packages C.3 Updating R package", " C R packages C.1 Installing R packages R comes preloaded with many useful functions. In addition, many people share useful functions they have developed as a package through CRAN and github. These packages will need to be installed on your computer before you can begin using them. The easiest way to install an R package is to use the install.packages function. For example, type and run the following line of code in console window of RStudio to install the ggplot2 package: install.packages(&#39;ggplot2&#39;) You can also install multiple packages at once by inputting them as an R list: install.packages( c(&#39;dplyr&#39;, &#39;tidyr&#39;, &#39;stringr&#39;) ) Often there are many packages that have very similar purpose. You will need to do a bit of research to know which packages might be the best for you. R-packages mailing list, R-bloggers and RStudio support are some places you can go to obtain valuable information about R packages. C.2 Loading R packages Once the packages are installed, every time you want to use it you will need to load them. The reason for installing and loading packages is to prevent R from becoming slow, by having only those programs that you need instead of everything that is available out there for use. To load an R package into the R environment you are working on, use the library function: library(ggplot2) Note that you no longer need to use the quotation marks here. C.3 Updating R package Catching bugs, improving performance and updating programs are important part of software maintenance. Thus, package authors occasionally release a new version of their packages. You will need to update the packages version in order to take advantage of improvements made to those packages. To do so, R provide the update.packages function: update.packages( c(&#39;dplyr&#39;, &#39;tidyr&#39;, &#39;stringr&#39;) ) Restarting R session is required after updating packages. Simply close RStudio and reopen it to begin using the updated version of the packages. "],["r-online-learning-resources.html", "D R online learning resources", " D R online learning resources R Programming Hands-on Programming with R (for absolute beginners, i.e., if you have never programmed before) R for Data Science (learn how to manipulate, analyze and visualize data using Rs Tidyverse packages) Advanced R (if you plan to be really good at R) R Graphics Cookbook ggplot2: Elegant Graphics for Data Analysis The R Graph Gallery (R graph samples with code) R Cheat Sheets (cheat sheets for many popular R packages) R for Empirical Analysis Introduction to Econometrics with R Forecasting: Principles and Practice Financial Engineering Analytics: A Practice Manual Using R R and Machine Learning An Introduction to Statistical Learning / with Applications in R (you can download the book and its R code) R Interface to Tensorflow (deep learning in R) Other Tutorials on Econometrics &amp; Statistics using R A Short R Tutorial by GermÃ¡n RodrÃ­guez Introductory Econometrics Examples (data and examples from Wooldridge) STAT545 by Jenny Bryan : Data wrangling, exploration, and analysis with R "]]
